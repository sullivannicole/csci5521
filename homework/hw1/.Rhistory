MA_ER_visits_through_sep_21 = ER_visits,
MA_IP_visits_through_sep_21 = ip_visits,
HIE_IP_cases_annualized = annualized_HIE_IP_cases) %>%
mutate(MA_ER_visits_monthly = MA_ER_visits_through_sep_21/9,
MA_IP_visits_annualized = MA_IP_visits_through_sep_21 * 1.33,
HIE_cases_PMPY = HIE_IP_cases_annualized / MA_mbrs_sep_21,
estimated_HIE_IP_coverage_method_1 = HIE_IP_cases_annualized / MA_IP_visits_annualized,
NC_scaling_factor = ifelse(state_abbrev == "NC", 0.8 / HIE_cases_PMPY, NA)) %>% # pilot tells us that NC has an 80% coverage, so create scaling factor
tidyr::fill(NC_scaling_factor, .direction = "updown") %>%
mutate(estimated_HIE_IP_coverage_method_2 = HIE_cases_PMPY * NC_scaling_factor,
estimated_monthly_ED_HIE_alerts = MA_ER_visits_monthly * ((estimated_HIE_IP_coverage_method_1 + estimated_HIE_IP_coverage_method_2)/2)) %>%
left_join(stars_coded, by = "state_abbrev") %>%
select(-state_lower)
write_csv(stellar_market_stats, glue("{path}Stellar ER alert estimates by state.csv"))
write_csv(stellar_market_stats, glue("{path}Stellar ER alert estimates by state.csv"))
install.packages("StatPerMeCo")
X <- matrix(rnorm(4000),ncol=4)
X
X <- matrix(rnorm(2), ncol = 4)
X
X <- matrix(rnorm(8), ncol = 4)
X
S <- diag(4)
S
H <- cov(X)
H
X
Frobenius(S, H)
StatPerMeCo::Frobenius(S, H)
0.8*0.9
0.1*0.7
0.1-0.07
0.75*0.1
0.075/0.25
0.7*0.1/0.25
0.98*0.1
0.9*0.98
0.9-0.882
1-0.098
0.098+0.018
0.1-0.098
0.884+0.116
0.98*0.1
0.098/.116
N <- 50
index <- 1:(2*N)
index
index <- sample(index)
index
x_offset = 0.5 # group seperation on x axis
y_offset = 0.5
g1_x = runif(N, min = 0, max = 1)
g1_y = runif(N, min = 0, max = 1)
g2_x = runif(N, min = 0+x_offset, max = 1+x_offset)
g2_y = runif(N, min = 0+y_offset, max = 1+y_offset)
g_x = c(g1_x, g2_x)
g_x
g_y
g_y = c(g1_y, g2_y)
group = c(rep(-1,N), rep(1,N))
group
for (j in 1:index) {
y_j = w0 + w1*g_x[j] + w2*g_y[j]
if (y_j >= 0){
pred_j = 1
}else{
pred_j = -1}
w0 = w0 + eta*(group[j] - pred_j)*1.0
w1 = w1 + eta*(group[j] - pred_j)*g_x[j]
w2 = w2 + eta*(group[j] - pred_j)*g_y[j]
if (verbose == T){
print(paste('  -> updating data point ', j, ' : '))
print(paste('     -> w0: ' ,w0))
print(paste('     -> w0: ' ,w1))
print(paste('     -> w0: ' ,w2))
}
}
for (j in 1:index) {
y_j = w0 + w1*g_x[j] + w2*g_y[j]
if (y_j >= 0){
pred_j = 1
}else{
pred_j = -1}
w0 = w0 + eta*(group[j] - pred_j)*1.0
w1 = w1 + eta*(group[j] - pred_j)*g_x[j]
w2 = w2 + eta*(group[j] - pred_j)*g_y[j]
if (verbose == T){
print(paste('  -> updating data point ', j, ' : '))
print(paste('     -> w0: ' ,w0))
print(paste('     -> w0: ' ,w1))
print(paste('     -> w0: ' ,w2))
}
}
M = 15            # number of epochs to run
eta = 0.005       # learning rate
th = 0.9          # threshold to stop
for (j in 1:index) {
y_j = w0 + w1*g_x[j] + w2*g_y[j]
if (y_j >= 0){
pred_j = 1
}else{
pred_j = -1}
w0 = w0 + eta*(group[j] - pred_j)*1.0
w1 = w1 + eta*(group[j] - pred_j)*g_x[j]
w2 = w2 + eta*(group[j] - pred_j)*g_y[j]
if (verbose == T){
print(paste('  -> updating data point ', j, ' : '))
print(paste('     -> w0: ' ,w0))
print(paste('     -> w0: ' ,w1))
print(paste('     -> w0: ' ,w2))
}
}
w0 = 0.1 # initial weitht
w1 = 0.2 # initial weight
w2 = 0.3 # initial weitht
for (j in 1:index) {
y_j = w0 + w1*g_x[j] + w2*g_y[j]
if (y_j >= 0){
pred_j = 1
}else{
pred_j = -1}
w0 = w0 + eta*(group[j] - pred_j)*1.0
w1 = w1 + eta*(group[j] - pred_j)*g_x[j]
w2 = w2 + eta*(group[j] - pred_j)*g_y[j]
if (verbose == T){
print(paste('  -> updating data point ', j, ' : '))
print(paste('     -> w0: ' ,w0))
print(paste('     -> w0: ' ,w1))
print(paste('     -> w0: ' ,w2))
}
}
verbose = T
for (j in 1:index) {
y_j = w0 + w1*g_x[j] + w2*g_y[j]
if (y_j >= 0){
pred_j = 1
}else{
pred_j = -1}
w0 = w0 + eta*(group[j] - pred_j)*1.0
w1 = w1 + eta*(group[j] - pred_j)*g_x[j]
w2 = w2 + eta*(group[j] - pred_j)*g_y[j]
if (verbose == T){
print(paste('  -> updating data point ', j, ' : '))
print(paste('     -> w0: ' ,w0))
print(paste('     -> w0: ' ,w1))
print(paste('     -> w0: ' ,w2))
}
}
N <- 50
w0 = 0.1 # initial weitht
w1 = 0.2 # initial weight
w2 = 0.3 # initial weitht
M = 15            # number of epochs to run
eta = 0.005       # learning rate
th = 0.9          # threshold to stop
verbose = T
for (j in 1:index) {
y_j = w0 + w1*g_x[j] + w2*g_y[j]
if (y_j >= 0){
pred_j = 1
}else{
pred_j = -1}
w0 = w0 + eta*(group[j] - pred_j)*1.0
w1 = w1 + eta*(group[j] - pred_j)*g_x[j]
w2 = w2 + eta*(group[j] - pred_j)*g_y[j]
if (verbose == T){
print(paste('  -> updating data point ', j, ' : '))
print(glue("Prediction: {pred_j}; truth: {group[j]}"))
print(paste('     -> w0: ' ,w0))
print(paste('     -> w1: ' ,w1))
print(paste('     -> w2: ' ,w2))
}
}
library(glue)
for (j in 1:index) {
y_j = w0 + w1*g_x[j] + w2*g_y[j]
if (y_j >= 0){
pred_j = 1
}else{
pred_j = -1}
w0 = w0 + eta*(group[j] - pred_j)*1.0
w1 = w1 + eta*(group[j] - pred_j)*g_x[j]
w2 = w2 + eta*(group[j] - pred_j)*g_y[j]
if (verbose == T){
print(paste('  -> updating data point ', j, ' : '))
print(glue("Prediction: {pred_j}; truth: {group[j]}"))
print(paste('     -> w0: ' ,w0))
print(paste('     -> w1: ' ,w1))
print(paste('     -> w2: ' ,w2))
}
}
y_pred == group
y_all = w0 + w1*g_x + w2*g_y
y_pred = y_all
y_pred
y_pred[y_all >= 0] = 1
y_pred[y_all< 0] = -1
y_pred
y_pred == group
acc = sum(y_pred == group)/length(group)
acc
y_all
library(tidyverse)
alt_data <- read_csv("AltData.csv")
alt_data <- read_csv("~/Documents/Academic/2021-2023/MS in DS/Coursework/2022/Spring/CSCI 5521/Homework/hw0_programming/AltData.csv")
View(alt_data)
alt_data <- read_csv("~/Documents/Academic/2021-2023/MS in DS/Coursework/2022/Spring/CSCI 5521/Homework/hw0_programming/AltData.csv", header = F)
alt_data <- read_csv("~/Documents/Academic/2021-2023/MS in DS/Coursework/2022/Spring/CSCI 5521/Homework/hw0_programming/AltData.csv", col_names = F)
View(alt_data)
ggplot(aes(X1, X2, color = X3)) +
geom_point()
ggplot(alt_data, aes(X1, X2, color = X3)) +
geom_point()
ggplot(alt_data, aes(X1, X2, color = as.factor(X3))) +
geom_point()
alt_data_w_preds <- alt_data %>%
mutate(prediction = 0.05000000000000002 +  0.2200039816 * X1 + 0.2936729794 * X2)
View(alt_data_w_preds)
ggplot(alt_data, aes(X1, X2, color = as.factor(X3))) +
geom_point() +
geom_line(data = data.frame(x = c(1, -1),
y = c(1, -1)))
ggplot(alt_data, aes(X1, X2, color = as.factor(X3))) +
geom_point() +
geom_line(data = data.frame(x = c(1, -1),
y = c(1, -1)), aes(x, y))
View(alt_data)
ggplot(alt_data, aes(X1, X2, color = as.factor(X3))) +
geom_point()
unweighted_coords <- data.frame(x = c(1, -1),
y = c(1, -1))
View(unweighted_coords)
ggplot(alt_data, aes(X1, X2, color = as.factor(X3))) +
geom_point() +
geom_line(data = unweighted_coords, aes(x, y))
ggplot() +
geom_point(data = alt_data, aes(X1, X2, color = as.factor(X3))) +
geom_line(data = unweighted_coords, aes(x, y))
ggplot() +
geom_point(data = alt_data, aes(X1, X2, color = as.factor(X3))) +
geom_line(data = unweighted_coords, aes(x, y), size = 1.2)
ggplot() +
geom_point(data = alt_data, aes(X1, X2, color = as.factor(X3))) +
geom_line(data = unweighted_coords, aes(x, y), size = 1.2) +
theme(legend.position = "bottom")
weighted_coords <- data.frame(x = c(0.6750481138000002, -0.6750481138000002),
y = c(0.9820200473999997, -0.9820200473999997))/0.9820200473999997
View(weighted_coords)
ggplot() +
geom_point(data = alt_data, aes(X1, X2, color = as.factor(X3))) +
geom_line(data = weighted_coords, aes(x, y), size = 1.2) +
theme(legend.position = "bottom")
weighted_coords <- data.frame(x = c(0.6750481138000002, -0.6750481138000002),
y = c(0.9820200473999997, -0.9820200473999997))/-0.9820200473999997
ggplot() +
geom_point(data = alt_data, aes(X1, X2, color = as.factor(X3))) +
geom_line(data = weighted_coords, aes(x, y), size = 1.2) +
theme(legend.position = "bottom")
weighted_coords <- data.frame(x = c(0.39268335400000026, -0.39268335400000026),
y = c(0.9368090807999996, -0.9368090807999996))/0.9368090807999996
ggplot() +
geom_point(data = alt_data, aes(X1, X2, color = as.factor(X3))) +
geom_line(data = weighted_coords, aes(x, y), size = 1.2) +
theme(legend.position = "bottom")
weighted_coords <- data.frame(x = c(0.3776859239999999, -0.3776859239999999),
y = c(0.5464645287999997, -0.5464645287999997))/0.5464645287999997
ggplot() +
geom_point(data = alt_data, aes(X1, X2, color = as.factor(X3))) +
geom_line(data = weighted_coords, aes(x, y), size = 1.2) +
theme(legend.position = "bottom")
weighted_coords <- data.frame(x = c(0.38938706415999996, -0.38938706415999996),
y = c(0.5751017519999991, -0.5751017519999991))/0.5751017519999991
ggplot() +
geom_point(data = alt_data, aes(X1, X2, color = as.factor(X3))) +
geom_line(data = weighted_coords, aes(x, y), size = 1.2) +
theme(legend.position = "bottom")
weighted_coords <- data.frame(x = c(0.49522603880000043, -0.49522603880000043),
y = c(0.4740330408000003, -0.4740330408000003))/0.49522603880000043
ggplot() +
geom_point(data = alt_data, aes(X1, X2, color = as.factor(X3))) +
geom_line(data = weighted_coords, aes(x, y), size = 1.2) +
theme(legend.position = "bottom")
install.packages("bslib")
IRkernel::installspec()
install.packages("IRkernel")
IRkernel::installspec()
getwd()
library(tidyverse)
follow_up <- read_csv('~/Documents/Academic/Professional/Optum Labs/Stellar/comparison_1_group_1.csv')
getwd()
follow_up <- read_csv('/Users/nicolesullivan/Documents/Professional/Optum Labs/Stellar/comparison_1_group_1.csv')
View(follow_up)
follow_up %>%
distinct(savvy_pid, stellar_dischg_dt, clm_dt, hedis_eligible_er_follow_up)
follow_up %>%
distinct(savvy_pid, stellar_dischg_dt, clm_dt, hedis_eligible_er_follow_up) %>%
arrange(savvy_pid, clm_dt)
follow_up %>%
filter(hedis_eligible_er_follow_up == 1) %>%
distinct(savvy_pid, stellar_dischg_dt, hedis_eligible_er_follow_up) %>%
arrange(savvy_pid, clm_dt)
follow_up %>%
filter(hedis_eligible_er_follow_up == 1) %>%
distinct(savvy_pid, stellar_dischg_dt, hedis_eligible_er_follow_up) %>%
arrange(savvy_pid, stellar_dischg_dt)
follow_up %>%
filter(hedis_eligible_er_follow_up == 1) %>%
group_by(savvy_pid) %>%
count()
follow_up_rate <- follow_up %>%
filter(hedis_eligible_er_follow_up == 1) %>%
distinct(savvy_pid, stellar_dischg_dt, hedis_eligible_er_follow_up) %>%
arrange(savvy_pid, stellar_dischg_dt)
View(follow_up_rate)
follow_up_rate <- follow_up %>%
filter(hedis_eligible_er_follow_up == 1) %>%
distinct(savvy_pid, stellar_dischg_dt, clm_dt, hedis_eligible_er_follow_up) %>%
arrange(savvy_pid, clm_dt)
follow_up_rate <- follow_up %>%
filter(hedis_eligible_er_follow_up == 1) %>%
distinct(savvy_pid, stellar_dischg_dt, clm_dt, hedis_eligible_er_follow_up) %>%
group_by(savvy_pid, stellar_dischg_dt) %>%
count()
follow_up_rate <- follow_up %>%
filter(hedis_eligible_er_follow_up == 1) %>%
distinct(savvy_pid, stellar_dischg_dt) %>%
count()
# Comparison 1, group 2
follow_up <- read_csv('/Users/nicolesullivan/Documents/Professional/Optum Labs/Stellar/comparison_1_group_2.csv')
follow_up <- read_csv('/Users/nicolesullivan/Documents/Professional/Optum Labs/Stellar/comparison_1_group_2.csv')
follow_up_rate <- follow_up %>%
filter(hedis_eligible_er_follow_up == 1) %>%
distinct(savvy_pid, stellar_dischg_dt) %>%
count()
View(follow_up_rate)
follow_up <- read_csv('/Users/nicolesullivan/Documents/Professional/Optum Labs/Stellar/comparison_2_group_treatment.csv')
follow_up_rate <- follow_up %>%
filter(hedis_eligible_er_follow_up == 1) %>%
distinct(savvy_pid, stellar_dischg_dt) %>%
count()
View(follow_up_rate)
install.packages("metR")
data(faithfuld)
library(faithfuld)
data(iris)
ggplot(iris, aes(species, petal)) +
geom_point()
library(ggplot2)
ggplot(iris, aes(species, petal)) +
geom_point()
View(iris)
ggplot(iris, aes(Petal.Width, Petal.Length)) +
geom_point()
ggplot(iris, aes(Petal.Width, Petal.Length, z= Sepal.Width)) +
geom_contour_filled()
install.packages("interp")
install.packages("reshape2")
library(ggpubr)
install.packages("ggpubr")
a <- c(1,2,3,4,5,6)
b <- c(2,3,5,6,1,9)
c <- c(3,5,5,5,10,8)
d <- c(10,20,30,40,50,55)
e <- c(7,8,9,4,6,10)
#create matrix from vectors
M <- cbind(a,b,c,d,e)
M
M_mean <- matrix(data=1, nrow=n) %*% cbind(mean(a),mean(b),mean(c),mean(d),mean(e))
k <- ncol(M) #number of variables
n <- nrow(M) #number of subjects
M_mean <- matrix(data=1, nrow=n) %*% cbind(mean(a),mean(b),mean(c),mean(d),mean(e))
View(M_mean)
D <- M - M_mean
D
(n - 1)^-1
1/(n-1)
C <- 1/(n-1) t(D) %*% D
C <- 1/(n-1) * t(D) %*% D
C
x <- c(1, 2, 3)
y <- c(4, 5, 6)
x %*% y
t(x) %*% y
M
D
C
knitr::opts_chunk$set(echo = TRUE)
install.packages("reticulate")
Sys.which("python")
library(reticulate) # to use Python
reticulate::repl_python()
theta = np.linspace(1, 100, 1000)
no
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(reticulate)
# create a new environment
virtualenv_create("hw1")
# install SciPy
virtualenv_install("hw1", "numpy")
# import SciPy (it will be automatically discovered in "r-reticulate")
numpy <- import("numpy")
#virtualenv_install("hw1", "numpy")
use_virtualenv("hw1")
conda_create("hw1")
# install SciPy
conda_install("hw1", "numpy")
knitr::opts_chunk$set(echo = TRUE)
# create a new environment
reticulate::conda_create("hw1")
# install numpy
conda_install("hw1", "numpy")
# install numpy
reticulate::conda_install("hw1", "numpy")
reticulate::use_condaenv("hw1")
library(tidyverse)
library(reticulate)
reticulate::repl_python()
ll_1c <- as.matrix(py$ll_1c_results)
ggplot() +
aes(seq(1, 100, length.out = 1000), as.numeric(ll_1c[,1])) +
geom_point(color = "white") +
labs(x = expression(theta),
y = expression(paste("1/", theta))) +
proj_theme
knitr::opts_chunk$set(echo = T, message = F, warning = F)
ll_1c <- as.matrix(py$ll_1c_results)
ggplot() +
aes(seq(1, 100, length.out = 1000), as.numeric(ll_1c[,1])) +
geom_point(color = "white") +
labs(x = expression(theta),
y = expression(paste("1/", theta))) +
proj_theme
loaded_font <- 'Didact Gothic'
text_color <- 'white'
# Hex codes
hex_purple <- "#5E72E4" #primary
hex_blue_lt <- "#5DCEF0" #info
hex_green <- "#63CF89" #success
hex_pink <- "#EA445B" #danger
hex_orange <- "#EC603E" #warning
hex_blue_dk <- "#172B4D" #default
hex_grey <- "#51535e"
hex_blue_deep <- "#0f151c"
proj_theme <- theme(plot.background = element_rect(fill = "#1e2936", color = "transparent"),
plot.margin = margin(t = "1.5", r = "1.5", b = "1.5", l = "1.5", unit = "cm"),
panel.background = element_rect(fill = "#1e2936"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
plot.title = element_text(family = loaded_font, color = text_color, hjust = 0.5, face = "bold", size = 30),
plot.caption = element_text(family = loaded_font, color = text_color, size = 9),
axis.title = element_text(family = loaded_font, size = 15, color = text_color),
axis.text = element_text(family = loaded_font, color = text_color, size = 10),
strip.background = element_rect(fill = "#0f151c"),
strip.text = element_text(color = "#a1aab5", family = loaded_font, face = "bold", size = 18),
legend.background = element_rect(fill = "transparent"),
legend.title = element_text(family = loaded_font, color = text_color),
legend.text = element_text(family = loaded_font, color = text_color),
legend.position = "bottom",
legend.key = element_rect(fill = NA))
ll_1c <- as.matrix(py$ll_1c_results)
ggplot() +
aes(seq(1, 100, length.out = 1000), as.numeric(ll_1c[,1])) +
geom_point(color = "white") +
labs(x = expression(theta),
y = expression(paste("1/", theta))) +
proj_theme
ggplot() +
aes(seq(1, 100, length.out = 1000), as.numeric(ll_1c[,1])) +
geom_point(color = "white", size = 0.8) +
labs(x = expression(theta),
y = expression(paste("1/", theta))) +
proj_theme
ggplot() +
aes(seq(1, 100, length.out = 1000), as.numeric(ll_1c[,1])) +
geom_point(color = "white", size = 0.7) +
labs(x = expression(theta),
y = expression(paste("1/", theta))) +
proj_theme
# DO THESE FIRST BEFORE LOADING RETICULATE PKG
# create a new environment
#reticulate::conda_create("hw1")
# install numpy
#reticulate::conda_install("hw1", "numpy")
reticulate::conda_install("hw1", "scipy")
reticulate::repl_python()
ggplot() +
aes(as.numeric(py$alpha_vals), as.numeric(py$phi_result)) +
geom_point(size = 2) +
geom_vline(xintercept = max_area, size = 1.4, color = 'blue')
ggplot() +
aes(as.numeric(py$alpha_vals), as.numeric(py$phi_result)) +
geom_point(size = 2) +
geom_vline(xintercept = py$max_area, size = 1.4, color = 'blue')
ggplot() +
aes(as.numeric(py$alpha_vals), as.numeric(py$phi_result)) +
geom_point(size = 2) +
geom_vline(xintercept = py$max_area, size = 1.4, color = 'blue') +
proj_theme
ggplot() +
aes(as.numeric(py$alpha_vals), as.numeric(py$phi_result)) +
geom_point(size = 0.7, color = "white") +
geom_vline(xintercept = py$max_area, size = 1.4, color = hex_purple) +
labs(x = expression(alpha),
y = expression(phi)) +
proj_theme
reticulate::repl_python()
py$pc2_misclass
reticulate::repl_python()
pc1_misclass
py$pc1_misclass
reticulate::repl_python()
